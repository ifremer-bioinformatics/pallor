// Load processes parameters
includeConfig 'conf/base.config'
// Load resources configuration
includeConfig 'conf/resources.config'
// Load nextflow workflow report parameters
includeConfig 'conf/reports.config'

// Workdir for temporary data
workDir = "${baseDir}/tmp_PALLOR/$params.projectName"

// Git informations of workflow
manifest {
  name = 'PALLOR'
  author = 'Alexandre Cormier, IFREMER-IRSI-SeBiMER'
  description = 'Phylogeny from universAL singLe cOpy oRthologs workflow developped by Ifremer SeBiMER team'
  homePage = 'https://gitlab.ifremer.fr/bioinfo/pallor'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.01.0'
  version = '0.2.0'
}

// Execution profiles
profiles {
    custom {
        includeConfig 'conf/custom.config'
        includeConfig 'conf/reports.config'
        // Workdir for temporary data
        workDir = "${baseDir}/work/$params.projectName"
    }
    docker {
        docker {
             enabled = true
             fixOwnership = true
             runOptions = "-u \$(id -u):\$(id -g)"
        }
        process {
            withLabel : biopython_env {
                container = "sebimer/biopython:1.78"
            }
            withLabel : busco_env {
                container = "ezlabgva/busco:v4.0.4_cv1"
            }
            withLabel : mafft_env {
                container = "quay.io/biocontainers/mafft:7.480--h779adbc_0"
            }
            withLabel : gblocks_env {
                container = "quay.io/biocontainers/gblocks:0.91b--h9ee0642_2"
            }
            withLabel : iqtree_env {
                container = "quay.io/biocontainers/iqtree:2.1.2--h56fc30b_0"
            }
        }

        singularity.enabled = false
    }
    singularity {
        docker.enabled = false
        singularity.autoMounts = true
        singularity.enabled = true
        process {
            withLabel : biopython_env {
                container = "sebimer/biopython:1.78"
            }
            withLabel : busco_env {
                container = "ezlabgva/busco:v4.0.4_cv1"
            }
            withLabel : mafft_env {
                container = "quay.io/biocontainers/mafft:7.480--h779adbc_0"
            }
            withLabel : gblocks_env {
                container = "quay.io/biocontainers/gblocks:0.91b--h9ee0642_2"
            }
            withLabel : iqtree_env {
                container = "quay.io/biocontainers/iqtree:2.1.2--h56fc30b_0"
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

